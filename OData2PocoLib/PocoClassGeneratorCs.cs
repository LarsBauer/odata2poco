using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using OData2Poco.CustAttributes;
using OData2Poco.TextTransform;

namespace OData2Poco
{
    /// <summary>
    ///     Generate c# code
    ///     PocoClassGeneratorCs(IPocoGenerator pocoGen, PocoSetting setting = null)
    ///     called from MetaDataReader class
    /// </summary>
    internal class PocoClassGeneratorCs : IPocoClassGenerator
    {
        private static IPocoGenerator _pocoGen;
        public IDictionary<string, ClassTemplate> PocoModel { get;  set; } 
        public string PocoModelAsJson => JsonConvert.SerializeObject(PocoModel, Formatting.Indented);

        /// <summary>
        ///     Constructor
        /// </summary>
        /// <param name="pocoGen"></param>
        /// <param name="setting"></param>
        public PocoClassGeneratorCs(IPocoGenerator pocoGen, PocoSetting setting = null)
        {
            PocoSetting = setting ?? new PocoSetting();
            //initialize AttributeFactory to use pocosetting.Attributes
            AttributeFactory.Default.Init(PocoSetting); 
            _pocoGen = pocoGen;
            PocoModel = new Dictionary<string, ClassTemplate>();
            Template = new FluentCsTextTemplate();
            var list = _pocoGen.GeneratePocoList(); //generate all classes from model
            //check reserved keywords
            ModelManager.RenameClasses(list);
            if (list != null)
                foreach (var item in list)
                {
                    PocoModel[item.Name] = item;
                }
            
            CodeText = null;
        }

        private static string CodeText { get; set; }
        public FluentCsTextTemplate Template { get; private set; }
        public PocoSetting PocoSetting { get; set; }

        /// <summary>
        ///     Indexer
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public ClassTemplate this[string key]
        {
            get { return PocoModel[key]; }
        }

        //container for all classes
        public List<ClassTemplate> ClassList
        {
            get { return PocoModel.Select(kvp => kvp.Value).ToList(); }
        }

    
        /// <summary>
        ///     Generate C# code for all POCO classes in the model
        /// </summary>
        /// <returns></returns>
        public string GeneratePoco()
        {
            Template.WriteLine(GetHeader()); //header of the file (using xxx;....)

            foreach (var item in PocoModel)
            {
                Template.WriteLine(ClassToString(item.Value)); //c# code of the class
            }
            Template.EndNamespace();
            return Template.ToString();
        }

        private string GetHeader()
        {
            var comment = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated using  OData2Poco Class library.
//     Service Url: {0}
//     MetaData Version: {1}
//     Generated On: {2}
// </auto-generated>
//------------------------------------------------------------------------------
";
            //Use a user supplied namespace prefix combined with the schema namepace or just the schema namespace
            var namespc = _pocoGen.MetaData.SchemaNamespace;
            if (!string.IsNullOrWhiteSpace(PocoSetting.NamespacePrefix))
            {
                namespc = (PocoSetting.NamespacePrefix + "." + _pocoGen.MetaData.SchemaNamespace).Replace("..", ".");
                namespc = namespc.TrimEnd('.');
            }


            //Ensure the <auto-generated> tag is at the start of the file, and enclose all usings in a namespace
            var h = new FluentCsTextTemplate();
            h.WriteLine(comment, _pocoGen.MetaData.ServiceUrl, _pocoGen.MetaData.MetaDataVersion,
                DateTimeOffset.Now.ToString("s"))
                .StartNamespace(namespc);
           

            var assemplyManager = new AssemplyManager(PocoSetting, PocoModel);
            var asemplyList = assemplyManager.AssemplyReference;
            foreach (var entry in asemplyList)
            {
                h.UsingNamespace(entry);
            }

            return h.ToString();
        }


        /// <summary>
        ///     Generte C# code for a given  Entity using FluentCsTextTemplate
        /// </summary>
        /// <param name="ent"> Class  to generate code</param>
        /// <param name="includeNamespace"></param>
        /// <returns></returns>
        internal string ClassToString(ClassTemplate ent, bool includeNamespace = false)
        {
            var csTemplate = new FluentCsTextTemplate();
            if (includeNamespace) csTemplate.WriteLine(GetHeader());


            ////for enum
            if (ent.IsEnum)
            {
                var elements = string.Join(",\r\n ", ent.EnumElements.ToArray());
                var flagAttribute = ent.IsFlags ? "[Flags] " : "";
                var enumString = $"\t{flagAttribute}public enum {ent.Name}\r\n\t {{\r\n {elements} \r\n\t}}";
                return enumString;
            }


            
            foreach (var item in ent.GetAllAttributes()) //not depend on pocosetting
            {
                csTemplate.PushIndent("\t").WriteLine(item).PopIndent();
            }
            var baseClass = ent.BaseType != null && PocoSetting.UseInheritance ? ent.BaseType : PocoSetting.Inherit;

            csTemplate.StartClass(ent.Name, baseClass,partial:true);
            
            foreach (var p in ent.Properties)
            {
                var pp = new PropertyGenerator(p, PocoSetting);

               
                if (p.IsNavigate)
                {
                    if (!PocoSetting.AddNavigation && !PocoSetting.AddEager) continue;
                }


                foreach (var item in pp.GetAllAttributes())
                {
                    csTemplate.WriteLine(item);
                }
                csTemplate.WriteLine(pp.Declaration);
            }
            csTemplate.EndClass();
            if (includeNamespace) csTemplate.EndNamespace(); //"}" for namespace
            CodeText = csTemplate.ToString();
            return CodeText;
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(CodeText)) CodeText = GeneratePoco();
            return CodeText;
        }
    }
}