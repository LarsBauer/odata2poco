using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using OData2Poco.CustAttributes;
using OData2Poco.TextTransform;

namespace OData2Poco
{
    /// <summary>
    ///     Generate c# code
    ///     PocoClassGeneratorCs(IPocoGenerator pocoGen, PocoSetting setting = null)
    ///     called from MetaDataReader class
    /// </summary>
    internal class PocoClassGeneratorCs : IPocoClassGenerator
    {
        public List<ClassTemplate> ClassList => PocoModel.Select(kvp => kvp.Value).ToList();
        private static IPocoGenerator _pocoGen;
        public IDictionary<string, ClassTemplate> PocoModel { get; set; }
        public string PocoModelAsJson => JsonConvert.SerializeObject(PocoModel, Formatting.Indented);

        private static string CodeText { get; set; }

        public FluentCsTextTemplate Template { get; private set; }

        public PocoSetting PocoSetting { get; set; }
        bool blankSpaceBeforeProperties = true;
        public ClassTemplate this[string key] => PocoModel[key];

        //container for all classes
        /// <summary>
        ///     Constructor
        /// </summary>
        /// <param name="pocoGen"></param>
        /// <param name="setting"></param>
        public PocoClassGeneratorCs(IPocoGenerator pocoGen, PocoSetting setting = null)
        {
            PocoSetting = setting ?? new PocoSetting();
            //add jsonproperty to properties/classes that are renamed
            PocoSetting?.Attributes.Add("original"); //v3.2

            //initialize AttributeFactory to use pocosetting.Attributes
            AttributeFactory.Default.Init(PocoSetting);
            _pocoGen = pocoGen;
            PocoModel = new Dictionary<string, ClassTemplate>();
            Template = new FluentCsTextTemplate();
            var list = _pocoGen.GeneratePocoList(); //generate all classes from model
            //check reserved keywords
            ModelManager.RenameClasses(list);
            if (list != null)
                foreach (var item in list)
                    PocoModel[item.FullName] = item;

            CodeText = null;
        }




        /// <summary>
        ///     Generate C# code for all POCO classes in the model
        /// </summary>
        /// <returns></returns>
        public string GeneratePoco()
        {
            var ns = PocoModel.Select(x => x.Value.NameSpace).Distinct()
                .OrderBy(x => x).ToList();

            Template.Header = GetHeader();
            Template.WriteLine(UsingAssemply(ns));
            foreach (var s in ns)
            {

                //Use a user supplied namespace prefix combined with the schema namepace or just the schema namespace

                //var namespc = s;
                var namespc = PrefixNamespace(s);

                Template.StartNamespace(namespc);
                var pocoModel2 = PocoModel.Where(x => x.Value.NameSpace == s);
                foreach (var item in pocoModel2)
                {
                    Template.WriteLine(ClassToString(item.Value)); //c# code of the class
                }
                Template.EndNamespace();
            }
            return Template.ToString();
        }

        private string PrefixNamespace(string name)
        {
            string namespc = name;
            if (!string.IsNullOrWhiteSpace(PocoSetting.NamespacePrefix))
            {
                namespc = PocoSetting.NamespacePrefix + "." + name;
            }

            return namespc;
        }

        private string GetHeader()
        {
            var comment = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated using  OData2Poco System.
//     Service Url: {0}
//     MetaData Version: {1}
//     Generated On: {2}
// </auto-generated>
//------------------------------------------------------------------------------
//";

            //The <auto-generated> tag  at the start of the file
            var h = new FluentCsTextTemplate();
            h.WriteLine(comment, _pocoGen.MetaData.ServiceUrl, _pocoGen.MetaData.MetaDataVersion,
                DateTimeOffset.Now.ToString("s"));

            return h.ToString();
        }
        private string UsingAssemply(List<string> nameSpaces)
        {
            var h = new FluentCsTextTemplate();
            var assemplyManager = new AssemplyManager(PocoSetting, PocoModel);
            var asemplyList = assemplyManager.AssemplyReference;
            foreach (var entry in asemplyList)
            {
                h.UsingNamespace(entry);
            }
            //add also namespaces of the built-in schema namespaces
            if (nameSpaces.Count > 1)
                nameSpaces.ForEach(x =>
                {
                    var namespc = PrefixNamespace(x);
                    h.UsingNamespace(namespc);
                });
            return h.ToString();
        }


        /// <summary>
        ///     Generte C# code for a given  Entity using FluentCsTextTemplate
        /// </summary>
        /// <param name="ent"> Class  to generate code</param>
        /// <param name="includeNamespace"></param>
        /// <returns></returns>
        internal string ClassToString(ClassTemplate ent, bool includeNamespace = false)
        {
            var csTemplate = new FluentCsTextTemplate();


            ////for enum
            if (ent.IsEnum)
            {
                var elements = string.Join(",\r\n ", ent.EnumElements.ToArray());
                var flagAttribute = ent.IsFlags ? "[Flags] " : "";
                var enumString = $"\t{flagAttribute}public enum {ent.Name}\r\n\t {{\r\n {elements} \r\n\t}}";
                return enumString;
            }



            foreach (var item in ent.GetAllAttributes()) //not depend on pocosetting
            {
                csTemplate.PushIndent("\t").WriteLine(item).PopIndent();
            }
            var baseClass = ent.BaseType != null && PocoSetting.UseInheritance ? ent.BaseType : PocoSetting.Inherit;

            csTemplate.StartClass(ent.Name, baseClass, partial: true, abstractClass: ent.IsAbstrct);

            foreach (var p in ent.Properties)
            {
                var pp = new PropertyGenerator(p, PocoSetting);


                if (p.IsNavigate)
                {
                    if (!PocoSetting.AddNavigation && !PocoSetting.AddEager) continue;
                }


                foreach (var item in pp.GetAllAttributes())
                {
                    if (!string.IsNullOrEmpty(item))
                        csTemplate.WriteLine(item);
                }
                csTemplate.WriteLine(pp.Declaration);

                if (blankSpaceBeforeProperties)
                    csTemplate.WriteLine(""); //empty line
            }
            csTemplate.EndClass();
            if (includeNamespace) csTemplate.EndNamespace(); //"}" for namespace
            CodeText = csTemplate.ToString();
            return CodeText;
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(CodeText)) CodeText = GeneratePoco();
            return CodeText;
        }
    }
}