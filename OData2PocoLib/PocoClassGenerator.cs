using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using OData2Poco.TextTransform;

//namespace OData2PocoLib.V4
namespace OData2Poco
{
    internal class PocoClassGenerator
    {
        internal IDictionary<string, ClassTemplate> ClassDictionary; //= new Dictionary<string, ClassTemplate>();
        private PocoSetting _PocoSetting =new PocoSetting() ;
        public ClassTemplate this[string key]
        {
            get { return ClassDictionary[key]; }
        }

        private static IPocoGenerator _pocoGen;
        private readonly FluentCsTextTemplate _template;
        //container for all classes
        //public List<ClassTemplate> ClassList { get; set; }
        private readonly Func<string> _header = () =>
        {
            var comment = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated using  OData2Poco Class library.
//     Service Url: {0}
//     MetaData Version: {1}
// </auto-generated>
//------------------------------------------------------------------------------
";
            //var metaDataVersion = _pocoGen.MetaDataVersion;
            // var metaDataAsString = _pocoGen.MetaDataAsString;
            //var serviceUrl = _pocoGen.ServiceUrl;
            var schemaNamespace = Helper.GetNameSpace(_pocoGen.MetaDataAsString);
            var h = new FluentCsTextTemplate();
            h.UsingNamespace("System")
             .UsingNamespace("System.Collections.Generic")
             .UsingNamespace("System.ComponentModel.DataAnnotations") //for attributes
             .UsingNamespace("System.ComponentModel.DataAnnotations.Schema") //for Table attributes
             .UsingNamespace("System.IO")
                // .UsingNamespace("System.Spatial")
             .WriteLineComment("uncomment for spatial data type and run Install-Package System.Spatial ")
             .WriteLineComment("using System.Spatial;")
             .WriteLine(comment, _pocoGen.ServiceUrl, _pocoGen.MetaDataVersion)
             .StartNamespace(schemaNamespace);
            //return h.ToString();
            return h.ToString();
        };

        internal PocoClassGenerator(IPocoGenerator pocoGen,PocoSetting setting)
        {
            _PocoSetting = setting;
            _pocoGen = pocoGen;
            ClassDictionary = new Dictionary<string, ClassTemplate>();
            _template = new FluentCsTextTemplate();
            var classList = _pocoGen.GeneratePocoList(); //generate all classes from model
            if (classList != null)
                foreach (var item in classList) ClassDictionary[item.Name] = item;
        }

        /// <summary>
        /// Generate C# code for all POCO classes in the model
        /// </summary>
        /// <returns></returns>
        private string GeneratePoco( )
        {
            //   ClassList = _pocoGen.GeneratePocoList(); //generate all classes from model
            _template.WriteLine(_header()); //header of the file (using xxx;....)
            foreach (var item in ClassDictionary)
            {
                _template.WriteLine(CsClassToString(item.Value)); //c# code of the class
            }
            _template.EndNamespace(); //"}" for namespace
            return _template.ToString();
        }
        //v1.4
        //TODO: find other implementation for multifile to avoid change break in API
        /// <summary>
        /// Generate entry for every class to be written in separate file
        /// </summary>
        /// <returns></returns>
        private Dictionary<string, string> GeneratePocoMultiFile()
        {
            Dictionary<string, string> codes = new Dictionary<string, string>();
            foreach (var item in ClassDictionary)
            {
                var template = new FluentCsTextTemplate();
                template.WriteLine(_header()); //header of the file (using xxx;....)
                template.WriteLine(CsClassToString(item.Value)); //c# code of the class
                template.EndNamespace(); //"}" for namespace
                codes[item.Key] = template.ToString();
            }
            return codes;
        }
        /// <summary>
        /// Generte C# code for a given  Entity using FluentCsTextTemplate
        /// </summary>
        /// <param name="ent"> Class  to generate code</param>
        /// <param name="includeNamespace"></param>
        /// <returns></returns>
        internal string CsClassToString(ClassTemplate ent, bool includeNamespace = false)
        {
            
            var csTemplate = new FluentCsTextTemplate();
            if (includeNamespace) csTemplate.WriteLine(_header());


            ////for enum
            if (ent.IsEnum)
            {
                var elements = string.Join(", ", ent.EnumElements.ToArray());
                var enumString = string.Format("public enum {0} {{ {1} }}", ent.Name, elements);
                return enumString;
            }

            //v1.4
            //add TableAttribute
            if (_PocoSetting.AddTableAttribute)
            {
                if (ent.EntitySetName != "")
                {
                    var tableAtt = string.Format("Table(\"{0}\")", ent.EntitySetName);
                    csTemplate.PushIndent("\t").WriteLineAttribute(tableAtt).PopIndent();
                }
            }
            csTemplate.StartClass(ent.Name);
            foreach (var p in ent.Properties)
            {
                //@@@ v1.0.0-rc3
                // navigation properties
                //v1.4 skip
                //if (p.IsNavigate) continue;

                //v1.5
                if (p.IsNavigate)
                {
                    //Console.WriteLine("navigation entity {0}  prop: {1}",ent.Name, p.PropName);
                    if (!_PocoSetting.AddNavigation) continue;

                }

                //v1.4
                //add key attributes
                if (_PocoSetting.AddKeyAttribute)
                {
                    if (p.IsKey) csTemplate.WriteLineAttribute("Key");
                }

                if (_PocoSetting.AddRequiredAttribute)
                {
                    if (!p.IsNullable) csTemplate.WriteLineAttribute("Required");
                }
                // if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)) 
                var virtualprop = (p.IsNavigate && _PocoSetting.AddNavigation);
                csTemplate.WriteLineProperty(p.PropType, p.PropName, comment: p.PropComment, isVirtual: virtualprop);
            }
            csTemplate.EndClass();
            if (includeNamespace) csTemplate.EndNamespace(); //"}" for namespace

            return csTemplate.ToString();
        }

        public override string ToString()
        {
            return GeneratePoco();
        }

        //static public implicit operator string(PocoClassGenerator pocoGen)
        //{
        //    return GeneratePoco();
        //}
    }
}
