using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

//namespace OData2PocoLib.V4
namespace OData2Poco
{
    internal class PocoClassGenerator
    {
        private readonly IPocoGenerator _pocoGen;

        //container for all classes
        public List<ClassTemplate> ClassList { get; set; }
        public PocoClassGenerator(IPocoGenerator pocoGen)
        {
            _pocoGen = pocoGen;
        }
        /// <summary>
        /// Generate Cs code for all POCO classes
        /// </summary>
        /// <returns></returns>
        public string GeneratePoco()
        {
            ClassList = _pocoGen.GeneratePocoList(); //generate all classes from model
            var textTemplate = new StringBuilder();
            AddUsingNamespace(textTemplate);
            textTemplate.AppendLine("{"); //namespace

            foreach (var item in ClassList)
            {
                textTemplate.AppendLine(CsClassToString(item));
            }
            textTemplate.AppendLine("}"); //namespace
            return textTemplate.ToString();
        }

        private void AddUsingNamespace(StringBuilder sb)
        {
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("//uncomment for spatial data type and run Install-Package System.Spatial  ");
            sb.AppendLine("//using System.Spatial; ");
            //if (MetaDataVersion == ODataVersion.V4)
            //    sb.AppendLine("using Microsoft.Spatial;");//Contains classes and methods that facilitate geography and geometry spatial operations. Support OData v4 only. 

            //add comments
            var comment = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated using  OData2Poco Class library.
//     Service Url: {0}
//     MetaData Version: {1}
// </auto-generated>
//------------------------------------------------------------------------------
";
            var metaDataVersion = _pocoGen.MetaDataVersion;
            var metaDataAsString = _pocoGen.MetaDataAsString;
            var serviceUrl = _pocoGen.ServiceUrl;
            var schemaNamespace = Helper.GetNameSpace(metaDataAsString);

            sb.AppendFormat(comment, serviceUrl, metaDataVersion);
            sb.AppendFormat("namespace {0}\r\n", schemaNamespace);
        }


        private string CsClassToString(ClassTemplate ent)
        {
            ////for enum
            if (ent.IsEnum)
            {
                var elements = string.Join(", ", ent.EnumElements.ToArray());
                var enumString = string.Format("public enum {0} {{ {1} }}", ent.Name, elements);
                return enumString;
            }

            var sbClass = new StringBuilder();
            sbClass.AppendFormat("    public class {0}\r\n", ent.Name);
            sbClass.AppendLine("    {");

            foreach (var p in ent.Properties)
            {
                //@@@ v1.0.0-rc3
                //skip navigation properties
                if (p.IsNavigate) continue;

                string s = string.Format("\t\tpublic {0} {1} {{get;set;}}  {2}", p.PropType, p.PropName, p.PropComment);
                sbClass.AppendLine(s);
            }
            sbClass.AppendLine("    }");
            return sbClass.ToString();
        }


    }
}
