
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

/*
 * todo: multi results may be stored in tuble named Data
 * multi interfaces to insure sequence of actions
 * use opertor implicit ??
 * GetMetaData (out metadata)
 * GetHeader(out header)
 * SaveCodeTo(fname) //this, code should be generated by previously called generate
 * SaveTo(fname ,multifiles) ? this
 * SaveMetaTo()  //this
 * 
 * o2p.Data
 * */
namespace OData2Poco
{
    /// <summary>
    /// Wrapper , non Flount Interface 
    /// </summary>
    public class O2P : IO2P
    {
        //metaddatainfo
        public string ServiceUrl
        {
            get { return _metaDataReader.MetaData.ServiceUrl; }
        }

        public string MetaDataAsString
        {
            get { return _metaDataReader.MetaData.MetaDataAsString; }
        }

        public string MetaDataVersion
        {
            get { return _metaDataReader.MetaData.MetaDataVersion; }
        }

        public string ServiceVersion
        {
            get { return _metaDataReader.MetaData.ServiceVersion; }
        } //for http media

        public string SchemaNamespace
        {
            get { return _metaDataReader.MetaData.SchemaNamespace; }
        }

        public Dictionary<string, string> ServiceHeader
        {
            get { return _metaDataReader.MetaData.ServiceHeader; }
        }

        public Media MediaType
        {
            get { return _metaDataReader.MetaData.MediaType; }
        }

        public PocoSetting Setting { get; set; }
        private MetaDataReader _metaDataReader;

        //private MetaDataInfo MetaData
        //{
        //    get { return _metaDataReader.MetaData; }

        //}

        private string User { get; set; }
        private string Password { get; set; }
        private string Url { get; set; }

        public List<ClassTemplate> ClassList;

        public string CodeText { get; set; }
        public O2P(string url, PocoSetting setting = null)
        {
            Url = url;
            Setting = setting ?? new PocoSetting();
        }


        public O2P(string url, string user, string password, PocoSetting setting = null):this(url,setting)
        {
            //Url = url;
            User = user;
            Password = password;
            //Setting = setting ?? new PocoSetting();
        }


        public void AddKeyAttribute()
        {
            Setting.AddKeyAttribute = true;
        }
        public void AddRequiredAttribute()
        {
            Setting.AddRequiredAttribute = true;
        }
        public void AddNavigation()
        {
            Setting.AddNavigation = true;
        }
        public void AddTableAttribute()
        {
            Setting.AddTableAttribute = true;

        }
        public string SaveMetaDataTo(string fname = "meta.xml")
        {
            if (string.IsNullOrEmpty(MetaDataAsString))
                throw new Exception("MetadataString is empty");
            Helper.SaveToFile(fname, MetaDataAsString, "No MetaData string is available");

            return MetaDataAsString;
        }

        public string Generate(string fname = "poco.cs")
        {
            if (Url == null)
                throw new NullReferenceException("Url is empty");

            _metaDataReader = string.IsNullOrEmpty(User)
            ? new MetaDataReader(Url)
            : new MetaDataReader(Url, User, Password);


            var gen = _metaDataReader.Generate(Setting);
            CodeText = gen.ToString();
            Helper.SaveToFile(fname, CodeText, "No code is generated");
            //  ClassList = gen.ClassDictionary.Select(kvp => kvp.Value).ToList();
            ClassList = gen.ClassList;
            return CodeText;
        }


        ///// <summary>
        ///// Implicit Convertion to string and return generated c# code
        ///// </summary>
        ///// <param name="o2p"></param>
        ///// <returns></returns>
        //public static implicit operator string(O2P o2p)
        //{
        //    return CodeText;
        //}
        ///// <summary>
        ///// Implict conversion
        ///// </summary>
        ///// <param name="o2p"></param>
        ///// <returns></returns>
        //public static implicit operator MetaDataInfo(O2P o2p)
        //{
        //    return MetaData;
        //}

    }
}


