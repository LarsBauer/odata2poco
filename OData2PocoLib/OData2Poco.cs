using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
/*
 * todo: multi results may be stored in tuble named Data
 * multi interfaces to insure sequence of actions
 * use opertor implicit ??
 * GetMetaData (out metadata)
 * GetHeader(out header)
 * SaveCodeTo(fname) //this, code should be generated by previously called generate
 * SaveTo(fname ,multifiles) ? this
 * SaveMetaTo()  //this
 * 
 * o2p.Data
 * */
namespace OData2Poco
{
    //fluent api
    public class O2P
    {
        private string User { get; set; }
        private string Password { get; set; }
        private string Url { get; set; }
        private MetaDataReader _metaDataReader;
        public List<ClassTemplate> ClassList;
        public string ServiceVersion { get; set; }
        public string MetaDataVersion { get; set; }
        public string MetaDataAsString { get; private set; }
        public Dictionary<string, string> ServiceHeader { get; set; }
        public PocoSetting Setting { get; set; }
        public O2P(string url)
        {
            Url = url;
            Setting = new PocoSetting();
           
        }

        public O2P()
        {
            Setting = new PocoSetting();

        }

        public O2P SetUrl(string url)
        {
            Url = url;
            return this;
        }
        public O2P SetUser(string user)
        {
            User = user;
            return this;
        }
        public O2P SetPassword(string password)
        {
            Password = password;
            return this;
        }
     public    O2P AddKeyAttribute()
     {
         Setting.AddKeyAttribute = true;
         return this;
     }
     public O2P AddRequiredAttribute()
     {
         Setting.AddRequiredAttribute = true;
         return this;
     }
     public O2P AddNavigation()
     {
         Setting.AddNavigation = true;
         return this;
     }
     public O2P AddTableAttribute()
     {
         Setting.AddTableAttribute = true;
         return this;
     }
        public O2P(string url, string user, string password)
            : this(url)
        {
            User = user;
            Password = password;
            //Url = _url;
        }

        public string Generate()
        {
            //todo: check url is not null, other options
            if (String.IsNullOrEmpty(Url))
            {
                throw new Exception("Url is empty");
            }
            return Generate(Setting);
        }

        public string Generate(Language lang = Language.CS)
        {
            if (lang == Language.CS) return CsGenerate();
            else return VBGenerate();
        }

        public string Generate(PocoSetting setting, Language lang = Language.CS)
        {
            Setting = setting;
            return Generate(lang);
        }

        private string VBGenerate()
        {
            throw new NotImplementedException();
        }
        //v1.3
        //wrapper
        //private string CSGenerate()
        //{
        //    _metaDataReader = string.IsNullOrEmpty(User)
        //    ? new MetaDataReader(Url)
        //    : new MetaDataReader(Url, User, Password);

        //    var code = _metaDataReader.GeneratePoco();
        //    ServiceVersion = _metaDataReader.ServiceVersion;
        //    MetaDataVersion = _metaDataReader.MetaDataVersion;
        //    //ClassList = _metaDataReader.ClassList;
        //    ServiceHeader = _metaDataReader.ServiceHeader;
        //    MetaDataAsString = _metaDataReader.MetaDataAsString;
        // //   File.WriteAllText(filename, code);
        //    // return this;
        //    return code;
        //}

        //v1.4, use Execute method , ToString () for code
        private string CsGenerate()
        {
            _metaDataReader = string.IsNullOrEmpty(User)
            ? new MetaDataReader(Url)
            : new MetaDataReader(Url, User, Password);

            var gen = _metaDataReader.Execute(Setting);
            var code = gen.ToString(); //.GeneratePoco();
            ServiceVersion = _metaDataReader.ServiceVersion;
            MetaDataVersion = _metaDataReader.MetaDataVersion;
            ClassList = gen.ClassDictionary.Select(kvp => kvp.Value).ToList();
            ServiceHeader = _metaDataReader.ServiceHeader;
            MetaDataAsString = _metaDataReader.MetaDataAsString;
            //   File.WriteAllText(filename, code);
            // return this;
            return code;
        }
        public void SaveMetadata(string fname = "meta.xml")
        {
            File.WriteAllText(fname, MetaDataAsString);
        }
    }
}
