using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

/*
 * todo: multi results may be stored in tuble named Data
 * multi interfaces to insure sequence of actions
 * use opertor implicit ??
 * GetMetaData (out metadata)
 * GetHeader(out header)
 * SaveCodeTo(fname) //this, code should be generated by previously called generate
 * SaveTo(fname ,multifiles) ? this
 * SaveMetaTo()  //this
 * 
 * o2p.Data
 * */
namespace OData2Poco
{
    /// <summary>
    /// Flount Class 
    /// </summary>
    public class O2P
    {
        public PocoSetting Setting { get; set; }
        private static MetaDataReader _metaDataReader;
        private static MetaDataInfo MetaData
        {
            get { return _metaDataReader.MetaData; }

        }

        private string User { get; set; }
        private string Password { get; set; }
        private string Url { get; set; }

        public List<ClassTemplate> ClassList;

        private static string CodeText { get; set; }
        public O2P(string url)
            : this()
        {
            Url = url;
        }

        public O2P()
        {
            Setting = new PocoSetting();
        }

        public O2P SetUrl(string url)
        {
            Url = url;
            return this;
        }
        public O2P Authenticate(string user, string password)
        {
            User = user;
            Password = password;
            return this;
        }

        public O2P AddKeyAttribute()
        {
            Setting.AddKeyAttribute = true;
            return this;
        }
        public O2P AddRequiredAttribute()
        {
            Setting.AddRequiredAttribute = true;
            return this;
        }
        public O2P AddNavigation()
        {
            Setting.AddNavigation = true;
            return this;
        }
        public O2P AddTableAttribute()
        {
            Setting.AddTableAttribute = true;
            return this;
        }
        public O2P(string url, string user, string password)
            : this(url)
        {
            User = user;
            Password = password;
        }

        public O2P SaveCodeTo(string fname = "poco.cs")
        {
            CodeText = Generate();
            File.WriteAllText(fname, CodeText);
            return this;
        }
        public O2P SaveMetaDataTo(string fname = "meta.xml")
        {
            File.WriteAllText(fname, MetaData.MetaDataAsString);
            return this;
        }
       
        public O2P Generate()
        {
            Generate(Setting);
            return this;
        }

        public O2P Generate(PocoSetting pocoSetting)
        {
            if (Url == null)
                throw new NullReferenceException("Url is empty");
            
            _metaDataReader = string.IsNullOrEmpty(User)
            ? new MetaDataReader(Url)
            : new MetaDataReader(Url, User, Password);

            var gen = _metaDataReader.Generate(pocoSetting);
            CodeText = gen.ToString();
            ClassList = gen.ClassDictionary.Select(kvp => kvp.Value).ToList();
            return this;
        }


        /// <summary>
        /// Implicit Convertion to string and return generated c# code
        /// </summary>
        /// <param name="o2p"></param>
        /// <returns></returns>
        public static implicit operator string(O2P o2p)
        {
            return CodeText;
        }
        /// <summary>
        /// Implict conversion
        /// </summary>
        /// <param name="o2p"></param>
        /// <returns></returns>
        public static implicit operator MetaDataInfo(O2P o2p)
        {
            return MetaData;
        }

        public override string ToString()
        {
            return this;
        }
    }
}
