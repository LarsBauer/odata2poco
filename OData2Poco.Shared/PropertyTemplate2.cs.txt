using System;
using System.Collections.Generic;
using OData2Poco.Shared;

namespace OData2Poco
{

    public partial class PropertyTemplate
    {
        private readonly Func<string, string> _getAttribute = (s) => string.Format("[{0}]", s);
        public string GetNameCase(PocoSetting setting)
        {

            switch (setting.NameCase)
            {
                case CaseEnum.Pas:
                    return PropName.ToPascalCase();

                case CaseEnum.Camel:
                    return PropName.ToCamelCase();

                default:
                    return PropName;
            }

        }

        public string GetDeclaration(PocoSetting setting)
        {

            //set nullable data types,e.g: int ?
            //var nulType = Setting.AddNullableDataType && Property.IsNullable
            //    ? Helper.GetNullable(Property.PropType)
            //    : "";
            var isVirtual = (setting.AddNavigation && !setting.AddEager);

            //string typeName = Property.PropType;
            ////string name=Name;
            string visibility = "public";
            ////bool isVirtual = virtualprop;
            //bool isNullable = Property.IsNullable; // false;
            //string comment = Property.PropComment;


            //set nullable data types
            var nulType = setting.AddNullableDataType && IsNullable ? Helper.GetNullable(PropType) : "";

            //var virtualprop = (PocoSetting.AddNavigation && !PocoSetting.AddEager);


            //property is declared in that order:
            //virtual public int? name  {get;set;} //comment

            var virtualText = isVirtual ? "virtual" : string.Empty;
            //var nullableText = Setting.AddNullableDataType && Property.IsNullable ? "?" : string.Empty;
            //var text = string.Format("{0} {1} {2}{3} {4} {{get;set;}} {5}",
            //    virtualText,
            //    visiblity,
            //    Property.PropType,
            //    nulType,
            //    Name,
            //    Property.PropComment);

            //declaration is in that order
            List<string> list = new List<string>
            {
                virtualText,
                visibility,
                PropType + nulType,
                GetNameCase(setting),
                "{get;set;}",
                PropComment
            };

            //return text.TrimAllSpace() + Environment.NewLine;
            var result = String.Join(" ", list);
            return result + Environment.NewLine;

        }
        /// <summary>
        /// //in future may be extra attributes or even custom user defined attributes
        /// </summary>
        /// <param name="setting"></param>
        /// <returns></returns>
        public List<string> GetAllAttributes(PocoSetting setting)
        {
            var list = new List<string>();

            //required Attribute
            if (setting.AddRequiredAttribute)
            {
                if (!IsNullable) list.Add(_getAttribute("Required"));
            }

            if (setting.AddKeyAttribute)
            {
                if (IsKey) list.Add(_getAttribute("Key"));
            }

            if (setting.AddJsonAttribute)
            {
                list.Add(string.Format("[JsonProperty(PropertyName = \"{0}\")]", PropName));
            }

            if (setting.AddDataMemberAttribute)
            {
                list.Add(_getAttribute("DataMember"));
            }
            return list;
        }

        /// <summary>
        /// tostring
        /// </summary>
        /// <param name="setting"></param>
        /// <returns></returns>
        public string ToString(PocoSetting setting)
        {
            return "";
        }
    }
}