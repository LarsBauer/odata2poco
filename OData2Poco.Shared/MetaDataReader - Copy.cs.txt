using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using PCLStorage;
//todo: credintial

namespace OData2Poco
{
    internal class MetaDataReader  //: IMetaDataReader
    {
        public MetaDataInfo MetaData { get; set; }
        public Media Source { get; set; }
        public string ServiceUrl { get; set; }
        public string MetaDataAsString { get; set; }
        
        private string User { get; set; }
        private string Token { get; set; }

        public MetaDataReader(string url) //:this()
        {
            ServiceUrl = url;
        }

        public MetaDataReader()
        {
            //MetaData = new MetaDataInfo();
        }

        public MetaDataReader(string url, string user, string pw)
            : this(url)
        {
            //@@@
            Token = Convert.ToBase64String(Encoding.UTF8.GetBytes(user + ":" + pw));
            User = user;
        }

        //public MetaDataInfo LoadMetaData(string xmlContent)
        //{
        //     MetaData = new MetaDataInfo
        //    {
        //        MetaDataAsString = xmlContent,
        //        MetaDataVersion = Helper.GetMetadataVersion(xmlContent),
        //        ServiceUrl = "",
        //        SchemaNamespace = Helper.GetNameSpace(xmlContent),
        //        MediaType = Media.Xml
        //    };
        //    return MetaData;
        //}
       
        public async Task<MetaDataInfo> LoadMetaDataAsync()
        {
            //if (ServiceUrl.StartsWith("<edmx:Edmx"))
            //{
            //    MetaData = SetMetaDataFromXml(ServiceUrl);
            //    return MetaData;
            //}

            if (ServiceUrl.StartsWith("http"))
            {
                MetaData= await LoadMetaDataHttpAsync();
                return MetaData;
            }
            MetaData = await LoadMetaDataFileAsync(); //file source
            return MetaData;
        }
        
        internal async Task<MetaDataInfo> LoadMetaDataHttpAsync()
        {
            string url = ServiceUrl.TrimEnd('/') + "/$metadata";
            //  using (var client = new WebClient())
            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Add("User-Agent", "OData2Poco");
                //credintial
                if (!string.IsNullOrEmpty(User))
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", Token);


                using (HttpResponseMessage response = await client.GetAsync(url))
                {
                 //   Debug.WriteLine(await response.Content.ReadAsStringAsync());
                    //response.EnsureSuccessStatusCode();
                    if (response.IsSuccessStatusCode)
                    {
                        var content = await response.Content.ReadAsStringAsync();
                        //  Debug.WriteLine(content);
                        if (!string.IsNullOrEmpty(content))
                        {
                            content = Helper.PrettyXml(content);
                            MetaData = new MetaDataInfo
                            {
                                MetaDataAsString = content,
                                MetaDataVersion = Helper.GetMetadataVersion(content),
                                ServiceUrl = ServiceUrl,
                                SchemaNamespace = Helper.GetNameSpace(content),
                                MediaType = Media.Http,
                                ServiceHeader = new Dictionary<string, string>()
                            };
                            foreach (var entry in response.Headers)
                            {
                                string value = entry.Value.FirstOrDefault();
                                string key = entry.Key;
                                //Debug.WriteLine(key +":" +value);
                                MetaData.ServiceHeader.Add(key, value);
                            }
                            MetaData.ServiceVersion = Helper.GetServiceVersion(MetaData.ServiceHeader);
                            Debug.WriteLine(MetaData.MetaDataAsString);
                            return MetaData;
                        }

                    }
                    Debug.WriteLine(response.ReasonPhrase);
                    throw new WebException("Http Error " + (int)response.StatusCode + ": " + response.ReasonPhrase);
                }
            }
        }
        internal async Task<MetaDataInfo> LoadMetaDataFileAsync()
        {
            IFile dataFile = await FileSystem.Current.GetFileFromPathAsync(ServiceUrl);
            if (dataFile == null)
                throw new FileNotFoundException("File not found: " + ServiceUrl);

            var content = await dataFile.ReadAllTextAsync();
            Debug.WriteLine(content);
            if (!string.IsNullOrEmpty(content))
            {
                MetaData = new MetaDataInfo
                {
                    MetaDataAsString = content,
                    MetaDataVersion = Helper.GetMetadataVersion(content),
                    ServiceUrl = ServiceUrl,
                    SchemaNamespace = Helper.GetNameSpace(content),
                    MediaType = Media.Xml
                };
                Debug.WriteLine(content);
                return MetaData;
            }
            return new MetaDataInfo();
        }

        /// <summary>
        /// Load Metadata from xml string
        /// </summary>
        /// <param name="xmlContent">xml string </param>
        /// <returns></returns>
        internal MetaDataInfo SetMetaDataFromXml(string xmlContent)
        {
            MetaData = new MetaDataInfo
            {
                MetaDataAsString = xmlContent,
                MetaDataVersion = Helper.GetMetadataVersion(xmlContent),
                ServiceUrl = "",
                SchemaNamespace = Helper.GetNameSpace(xmlContent),
                MediaType = Media.Xml
            };
            //Debug.WriteLine(xmlContent);
            return MetaData;
        }
     


       
       
        #region CodeGeneration
        /// <summary>
        /// Generate Code
        /// </summary>
        /// <param name="setting">Options that control code generation</param>
        /// <returns></returns>
        public IPocoClassGenerator GeneratePoco(PocoSetting setting)
        {
            Language lang = setting.Lang;
            //Debug.WriteLine(MetaData.MetaDataAsString);
            //Console.WriteLine("metadatareader generate key: {0}", setting.AddKeyAttribute);
            //if (MetaData == null)
            //MetaData = await LoadMetaDataAsync();


            //IPocoGenerator pocoFactory = PocoFactory.Create(MetaData);
            //IPocoClassGenerator generator;
            //if (lang == Language.CS) generator = new PocoClassGeneratorCs(pocoFactory, setting); //.GeneratePoco();
            //else //vb ,java,...
            //    throw new NotImplementedException();

            var generator = PocoFactory.GeneratePoco(MetaData, setting);
            return generator;

        }

        #endregion

    }


}
