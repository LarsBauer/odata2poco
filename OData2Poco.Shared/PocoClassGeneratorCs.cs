using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using OData2Poco.TextTransform;

//namespace OData2PocoLib.V4
namespace OData2Poco
{
    /// <summary>
    /// Generate c# code g 
    ///    PocoClassGeneratorCs(IPocoGenerator pocoGen, PocoSetting setting = null)
    /// called from MetaDataReader class
    /// </summary>
    internal class PocoClassGeneratorCs : IPocoClassGenerator
    {
        private readonly IDictionary<string, ClassTemplate> _classDictionary; //= new Dictionary<string, ClassTemplate>();
        public PocoSetting PocoSetting { get; set; }  //  

        /// <summary>
        /// Indexer
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public ClassTemplate this[string key]
        {
            get { return _classDictionary[key]; }
        }

        private static string CodeText { get; set; }
        private static IPocoGenerator _pocoGen;
        public FluentCsTextTemplate Template { get; private set; }
        //container for all classes
        public List<ClassTemplate> ClassList
        {
            get
            {
                return _classDictionary.Select(kvp => kvp.Value).ToList();
            }

        }

//        private readonly Func<string> _header = () =>
//        {
//            var comment = @"
////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was generated using  OData2Poco Class library.
////     Service Url: {0}
////     MetaData Version: {1}
//// </auto-generated>
////------------------------------------------------------------------------------
//";
//            //Use a user supplied namespace or the default if one wasn't supplied
//            var namespc = _pocoGen.MetaData.SchemaNamespace;
//            if(!string.IsNullOrWhiteSpace(PocoSetting.Namespace))
//                namespc = PocoSetting.Namespace;

//            var h = new FluentCsTextTemplate();
//            h.UsingNamespace("System")
//             .UsingNamespace("System.Collections.Generic")
//             .UsingNamespace("System.ComponentModel.DataAnnotations") //for attributes
//             .UsingNamespace("System.ComponentModel.DataAnnotations.Schema") //for Table attributes
//             .UsingNamespace("System.IO")
//                // .UsingNamespace("System.Spatial")
//             .WriteLineComment("uncomment for spatial data type and run Install-Package System.Spatial ")
//             .WriteLineComment("using System.Spatial;")
//             .WriteLine(comment, _pocoGen.MetaData.ServiceUrl, _pocoGen.MetaData.MetaDataVersion)
//            .StartNamespace(_pocoGen.MetaData.SchemaNamespace);

//            return h.ToString();
//        };

        private string GetHeader()
        {
            var comment = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated using  OData2Poco Class library.
//     Service Url: {0}
//     MetaData Version: {1}
//     Generated On: {2}
// </auto-generated>
//------------------------------------------------------------------------------
";
            //Use a user supplied namespace prefix combined with the schema namepace or just the schema namespace
            var namespc = _pocoGen.MetaData.SchemaNamespace;
            if(!string.IsNullOrWhiteSpace(PocoSetting.NamespacePrefix))
            {
                namespc = (PocoSetting.NamespacePrefix + "." + _pocoGen.MetaData.SchemaNamespace).Replace("..", ".");
                namespc=namespc.TrimEnd('.');
            }
        

            //Ensure the <auto-generated> tag is at the start of the file, and enclose all usings in a namespace
            var h = new FluentCsTextTemplate();
            h.WriteLine(comment, _pocoGen.MetaData.ServiceUrl, _pocoGen.MetaData.MetaDataVersion,DateTimeOffset.Now.ToString("s"))
             .StartNamespace(namespc)
             .UsingNamespace("System")
             .UsingNamespace("System.Collections.Generic");

            //Add required namespace for [Key] attributes
            if (PocoSetting.AddKeyAttribute)
             h.UsingNamespace("System.ComponentModel.DataAnnotations");
            
            //Add required namespace for [Table] attributes
            if (PocoSetting.AddTableAttribute)
              h.UsingNamespace("System.ComponentModel.DataAnnotations.Schema");
             
            //Add remaining namespaces and comments
            h.UsingNamespace("System.IO")
             // .UsingNamespace("System.Spatial")
             .WriteLineComment("uncomment for spatial data type and run Install-Package System.Spatial ")
             .WriteLineComment("using System.Spatial;");
            
            return h.ToString();
        }
    

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="pocoGen"></param>
        /// <param name="setting"></param>
        public PocoClassGeneratorCs(IPocoGenerator pocoGen, PocoSetting setting = null)
        {
            PocoSetting = setting ?? new PocoSetting();
            _pocoGen = pocoGen;
            _classDictionary = new Dictionary<string, ClassTemplate>();
            Template = new FluentCsTextTemplate();
            var list = _pocoGen.GeneratePocoList(); //generate all classes from model
            if (list != null)
                foreach (var item in list) _classDictionary[item.Name] = item;
            //Console.WriteLine("PocoClassGeneratorCs constructor key: {0}", PocoSetting.AddKeyAttribute);
            CodeText = null;
        }

        /// <summary>
        /// Generate C# code for all POCO classes in the model
        /// </summary>
        /// <returns></returns>
        public string GeneratePoco()
        {
            //   ClassList = _pocoGen.GeneratePocoList(); //generate all classes from model
            Template.WriteLine(GetHeader()); //header of the file (using xxx;....)
            //Console.WriteLine("wwwwwww before loop GeneratePoco call ClassToString key: {0}", PocoSetting.AddKeyAttribute);
            foreach (var item in _classDictionary)
            {
                //Console.WriteLine("yyyyyy GenerateCsPoco call ClassToString key: {0}", PocoSetting.AddKeyAttribute);
                Template.WriteLine(ClassToString(item.Value)); //c# code of the class
            }
            Template.EndNamespace(); //"}" for namespace
            return Template.ToString();
        }


        ////v1.4
        ////TODO: find other implementation for multifile to avoid change break in API
        ///// <summary>
        ///// Generate entry for every class to be written in separate file
        ///// </summary>
        ///// <returns></returns>
        //private Dictionary<string, string> GeneratePocoMultiFile()
        //{
        //    Dictionary<string, string> codes = new Dictionary<string, string>();
        //    foreach (var item in _classDictionary)
        //    {
        //        var template = new FluentCsTextTemplate();
        //        template.WriteLine(_header()); //header of the file (using xxx;....)
        //        template.WriteLine(ClassToString(item.Value)); //c# code of the class
        //        template.EndNamespace(); //"}" for namespace
        //        codes[item.Key] = template.ToString();
        //    }
        //    return codes;
        //}

       


        /// <summary>
        /// Generte C# code for a given  Entity using FluentCsTextTemplate
        /// </summary>
        /// <param name="ent"> Class  to generate code</param>
        /// <param name="includeNamespace"></param>
        /// <returns></returns>
        internal string ClassToString(ClassTemplate ent, bool includeNamespace = false)
        {
           
            var csTemplate = new FluentCsTextTemplate();
            if (includeNamespace) csTemplate.WriteLine(GetHeader());


            ////for enum
            if (ent.IsEnum)
            {
                var elements = string.Join(", ", ent.EnumElements.ToArray());
                var enumString = string.Format("public enum {0} {{ {1} }}", ent.Name, elements);
                return enumString;
            }

            //v1.4
            //add TableAttribute
            if (PocoSetting.AddTableAttribute)
            {
                if (ent.EntitySetName != "")
                {
                    var tableAtt = string.Format("Table(\"{0}\")", ent.EntitySetName);
                    csTemplate.PushIndent("\t").WriteLineAttribute(tableAtt).PopIndent();
                }
            }
            csTemplate.StartClass(ent.Name, PocoSetting.Inherit);
            foreach (var p in ent.Properties)
            {
                //@@@ v1.0.0-rc3
                // navigation properties
                //v1.4 skip
                //if (p.IsNavigate) continue;

                //v1.5
                if (p.IsNavigate)
                {  
                    //Console.WriteLine("navigation entity {0}  prop: {1}",ent.Name, p.PropName);
                    if (!PocoSetting.AddNavigation && !PocoSetting.AddEager) continue;

                }

                //v1.4
                //add key attributes
                if (PocoSetting.AddKeyAttribute)
                {
                    if (p.IsKey) csTemplate.WriteLineAttribute("Key");
                }

                if (PocoSetting.AddRequiredAttribute)
                {
                    if (!p.IsNullable) csTemplate.WriteLineAttribute("Required");
                }
                //set nullable data types
                var nulType = PocoSetting.AddNullableDataType && p.IsNullable ? Helper.GetNullable(p.PropType) : "";
                // if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)) 
                var virtualprop = (PocoSetting.AddNavigation && !PocoSetting.AddEager);
                //var virtualprop = (PocoSetting.AddNavigation);
                csTemplate.WriteLineProperty(p.PropType + nulType, p.PropName, comment: p.PropComment, isVirtual: virtualprop);
            }
            csTemplate.EndClass();
            if (includeNamespace) csTemplate.EndNamespace(); //"}" for namespace
            CodeText = csTemplate.ToString();
            return CodeText;
        }

        public override string ToString()
        {
            if (string.IsNullOrEmpty(CodeText)) CodeText = GeneratePoco();
            return CodeText;

        }

    }
}

